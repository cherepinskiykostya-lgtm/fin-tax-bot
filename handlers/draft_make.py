import logging
from typing import Iterable, Tuple
from urllib.parse import urlencode

import httpx
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from settings import settings
from db.session import SessionLocal
from db.models import Article, Draft

log = logging.getLogger("bot")

def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id if update.effective_user else None
        if not uid or uid not in settings.admin_id_list:
            try:
                if update.message:
                    await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            except Exception:
                pass
            return
        return await func(update, context)
    return wrapper


TAGS = "#PillarTwo #CFC #CRS #BO #WHT #IPBox #TP #DiiaCity #NBU #UkraineTax #IT"
DISCLAIMER = "–ú–∞—Ç–µ—Ä—ñ–∞–ª –º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —ñ –Ω–µ —î –ø–æ–¥–∞—Ç–∫–æ–≤–æ—é/—é—Ä–∏–¥–∏—á–Ω–æ—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—î—é."

PROMPT = """–¢–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–∏–Ω –∑ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è. –°—Ç–∏—Å–ª–æ (600‚Äì900 —Å–∏–º–≤–æ–ª—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é) —Å—Ñ–æ—Ä–º—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram –∑–∞ —à–∞–±–ª–æ–Ω–æ–º Markdown:
üß≠ [–¢–ï–ú–ê] –ö—Ä–∞—ó–Ω–∞/–û—Ä–≥–∞–Ω ‚Äî –∫–æ—Ä–æ—Ç–∫–æ
–©–æ —Å—Ç–∞–ª–æ—Å—è: 1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è.
–ß–æ–º—É –≤–∞–∂–ª–∏–≤–æ (IT/CFO): 1‚Äì2 –±—É–ª—ñ—Ç–∏.
–©–æ –∑—Ä–æ–±–∏—Ç–∏: 1‚Äì3 –±—É–ª—ñ—Ç–∏.
–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –Ω–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —Ç–µ–≥–∏, —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –¢–æ–Ω: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π, –±–µ–∑ —é—Ä–ø–æ—Ä–∞–¥. –û—Å—å –≤–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç, URL): 
"""

def _utm(url: str) -> str:
    params = {"utm_source": settings.UTM_SOURCE, "utm_medium": settings.UTM_MEDIUM, "utm_campaign": settings.UTM_CAMPAIGN}
    glue = "&" if ("?" in url) else "?"
    return url + glue + urlencode(params)

async def _llm_rewrite_ua(text: str) -> str:
    if not settings.OPENAI_API_KEY:
        # —Ñ–æ–ª–ª–±–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç
        return text[:900]
    try:
        import openai  # type: ignore
        openai.api_key = settings.OPENAI_API_KEY
        # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä—ã–º SDK
        completion = openai.ChatCompletion.create(
            model=settings.OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "You are a tax news editor writing concise Ukrainian summaries."},
                {"role": "user", "content": text},
            ],
            temperature=0.3,
        )
        return completion.choices[0].message["content"][:1200]
    except Exception:
        return text[:900]

def _trim(text: str, limit: int = 48) -> str:
    if len(text) <= limit:
        return text
    return text[: limit - 1] + "‚Ä¶"


async def _fetch_article_candidates(limit: int = 6) -> list[Article]:
    async with SessionLocal() as s:  # type: AsyncSession
        rows = (
            await s.execute(
                select(Article)
                .where(Article.level1_ok.is_(True), Article.taken.is_(False))
                .order_by(Article.created_at.desc())
                .limit(limit)
            )
        ).scalars().all()
    return list(rows)


def _build_keyboard(articles: Iterable[Article]) -> Tuple[str, InlineKeyboardMarkup]:
    rows = []
    articles = list(articles)
    if articles:
        for a in articles:
            domain = _trim(a.source_domain, 18)
            title = _trim(a.title or a.url, 32)
            text = f"{domain} ¬∑ {title}"
            rows.append([InlineKeyboardButton(text, callback_data=f"make:{a.id}")])
        footer = [
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="make:refresh"),
            InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="make:close"),
        ]
        rows.append(footer)
        message = "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—Ç—é –∑ —Ä—ñ–≤–Ω—è 1, —â–æ–± –∑—ñ–±—Ä–∞—Ç–∏ –¥—Ä–∞—Ñ—Ç:"
    else:
        rows.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="make:refresh")])
        message = "–í—ñ–ª—å–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π –∑ —Ä—ñ–≤–Ω—è 1 –ø–æ–∫–∏ –Ω–µ–º–∞—î. –û–Ω–æ–≤—ñ—Ç—å —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º."
    return message, InlineKeyboardMarkup(rows)


async def _send_article_menu(update: Update, *, edit_message: bool = False):
    articles = await _fetch_article_candidates()
    text, keyboard = _build_keyboard(articles)
    if edit_message and update.callback_query and update.callback_query.message:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    elif update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def _create_draft(aid: int, user_id: int | None):
    async with SessionLocal() as s:  # type: AsyncSession
        a = await s.get(Article, aid)
        if not a:
            return False, "–°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        if not a.level1_ok:
            return False, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –¥–∂–µ—Ä–µ–ª–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –†—ñ–≤–µ–Ω—å 1."
        if a.taken:
            return False, "–£–∂–µ —î –¥—Ä–∞—Ñ—Ç –∑ —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ."

        base_text = f"{a.title}\n\n{(a.summary or '')}\n\n{a.url}"
        ua = await _llm_rewrite_ua(PROMPT + base_text)

        src_md = f"–î–∂–µ—Ä–µ–ª–∞: [{a.source_domain}]({_utm(a.url)})\n\n_{DISCLAIMER}_"
        d = Draft(
            article_id=a.id,
            body_md=ua.strip(),
            sources_md=src_md,
            tags=TAGS,
            image_url=a.image_url,
            created_by=user_id,
        )
        s.add(d)
        a.taken = True
        await s.commit()
        return True, d


@admin_only
async def make_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /make ‚Äî –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π –∞–±–æ /make <article_id> –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É.
    """
    if not context.args:
        await _send_article_menu(update)
        return
    try:
        aid = int(context.args[0])
    except Exception:
        if update.message:
            await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.")
        return

    success, result = await _create_draft(aid, update.effective_user.id if update.effective_user else None)
    if update.message:
        if success:
            draft: Draft = result  # type: ignore[assignment]
            await update.message.reply_text(
                f"–î—Ä–∞—Ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ  ID: {draft.id}. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /preview {draft.id} –∞–±–æ /approve {draft.id}"
            )
        else:
            await update.message.reply_text(result)  # type: ignore[arg-type]


@admin_only
async def make_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data:
        return

    data = query.data
    if data == "make:refresh":
        await query.answer("–û–Ω–æ–≤–ª–µ–Ω–æ")
        await _send_article_menu(update, edit_message=True)
        return
    if data == "make:close":
        await query.answer("–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ")
        if query.message:
            await query.message.edit_text("–ú–µ–Ω—é /make –∑–∞–∫—Ä–∏—Ç–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —â–µ —Ä–∞–∑, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏.")
        return
    if not data.startswith("make:"):
        return

    try:
        aid = int(data.split(":", 1)[1])
    except (ValueError, IndexError):
        await query.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä", show_alert=True)
        return

    await query.answer("–ì–æ—Ç—É—î–º–æ –¥—Ä–∞—Ñ—Ç‚Ä¶")
    success, result = await _create_draft(aid, update.effective_user.id if update.effective_user else None)
    if success:
        draft: Draft = result  # type: ignore[assignment]
        if query.message:
            await query.message.reply_text(
                f"–î—Ä–∞—Ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ  ID: {draft.id}. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /preview {draft.id} –∞–±–æ /approve {draft.id}"
            )
        await _send_article_menu(update, edit_message=True)
    else:
        await query.answer(result, show_alert=True)  # type: ignore[arg-type]
