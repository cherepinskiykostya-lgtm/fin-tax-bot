from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand
from telegram.ext import ContextTypes
from db.session import SessionLocal
from db.models import User


MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("/articles"), KeyboardButton("/queue")],
        [KeyboardButton("/preview"), KeyboardButton("/approve")],
        [KeyboardButton("/make"), KeyboardButton("/help")],
        [KeyboardButton("/ping")],
    ],
    resize_keyboard=True,
)


BOT_COMMANDS = [
    BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"),
    BotCommand("articles", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏"),
    BotCommand("queue", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –¥—Ä–∞—Ñ—Ç–æ–≤"),
    BotCommand("preview", "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä–∞—Ñ—Ç –ø–æ ID"),
    BotCommand("approve", "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥—Ä–∞—Ñ—Ç"),
    BotCommand("make", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"),
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user:
        try:
            async with SessionLocal() as session:
                await session.run_sync(lambda sync_conn: User.metadata.create_all(sync_conn))
                existing = await session.get(User, update.effective_user.id)
                if not existing:
                    session.add(User(
                        id=update.effective_user.id,
                        username=update.effective_user.username,
                        first_name=update.effective_user.first_name,
                        last_name=update.effective_user.last_name,
                        language_code=update.effective_user.language_code,
                    ))
                await session.commit()
        except Exception:
            pass
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ Railway –≥–æ—Ç–æ–≤ üöÄ  –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é.",
            reply_markup=MAIN_MENU_KEYBOARD,
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "/articles [N|all] ‚Äî —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏\n"
        "/queue ‚Äî –æ—á–µ—Ä–µ–¥—å –¥—Ä–∞—Ñ—Ç–æ–≤\n"
        "/preview <id> ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥—Ä–∞—Ñ—Ç–∞\n"
        "/approve <id> ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥—Ä–∞—Ñ—Ç–∞\n"
        "/make ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=MAIN_MENU_KEYBOARD)


async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("pong ‚úÖ", reply_markup=MAIN_MENU_KEYBOARD)
